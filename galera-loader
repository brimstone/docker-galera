#!/bin/bash
set -ueo pipefail

log(){
	echo "$(date +"%F %H:%M:%S") $1"
}
run(){
	chown -R mysql: /var/lib/mysql
	exec /usr/sbin/mysqld \
	--basedir=/usr \
	--datadir=/var/lib/mysql \
	--plugin-dir=/usr/lib/mysql/plugin \
	--user=mysql \
	--console \
	--pid-file=/var/run/mysqld/mysqld.pid \
	--socket=/var/run/mysqld/mysqld.sock \
	--port=3306 \
	--wsrep_start_position=00000000-0000-0000-0000-000000000000:-1 \
	--binlog-format=row
}

backup_wait(){
	# If the user doesn't want backups, don't even try to make any
	[ "$BACKUP_COUNT" -gt 0 ] || return
	mkdir /var/backups/mysql 2>/dev/null || true
	while true; do
		sleep ${BACKUP_DELAY}
		backup &
	done
}

backup(){
	BACKUP_LOCK=/var/tmp/backup_lock
	if [ -f "$BACKUP_LOCK" ]; then
		log "0 [Warning] Backup: Skipping due to lock file existing"
		return 1
	fi
	touch $BACKUP_LOCK
	log "0 [Note] Backup: Starting"
	cd /var/backups/mysql
	# backup everything to this directory
	for DB in $( mysql -Ns -e 'show databases' \
				| grep -vE "^information_schema$|^performance_schema$|^test$"
				); do
		for count_down in $(seq $(( BACKUP_COUNT - 1 )) 1 -1); do
			if [ $count_down = 0 ]; then
				[ -f ${DB}.sql ] && mv ${DB}.sql \
							${DB}.sql.$(( count_down + 1 ))
			else
				[ -f ${DB}.sql.${count_down} ] && mv ${DB}.sql.${count_down} \
									${DB}.sql.$(( count_down + 1))
			fi
		done
		log "0 [Note] Backup: Backing up $DB"
		/usr/bin/mysqldump --single-transaction --databases "$DB" > "${DB}.sql"
		log "0 [Note] Backup: Backing up $DB done"
	done
	log "0 [Note] Backup: Done"
	[ -f "$BACKUP_LOCK" ] && rm -f $BACKUP_LOCK
}

restore(){
	sleep 2
	log "0 [Note] Restore: Starting"
	for f in /var/backups/mysql/*.sql; do
		log "0 [Note] Restore: Attempting to restore $f"
		until mysql --connect_timeout=2 < "$f"; do
			log "0 [Error] Restore: Error importing ${f}. Delaying then trying again."
			sleep 30
		done
		log "0 [Note] Restore: Restored $f"
		if [ "$f" = "/var/backups/mysql/mysql.sql" ]; then
			log "0 [Note] Restore: Flushing Privileges"
			mysql -e "flush privileges;"
		fi
	done
	log "0 [Note] Restore: Done restoring"
	backup_wait &
}

if [ "${1:-}" = "garbd" ]; then
	shift
	exec garbd --group "${CLUSTERNAME}" "$@"
fi

if [ -e /etc/mysql/conf.d/runtime.cnf ]; then
	# This is our first run.
	run
fi

if [ -z "$PEERS" ]; then
	log "0 [Warning] WSREP: PEERS undefined, this node is starting in bootstrap mode."
fi

[ ! -d /var/log/mysql ] && mkdir -pv /var/log/mysql
chown mysql:mysql -R /var/log/mysql

cat > /etc/mysql/conf.d/runtime.cnf << dog
[mysqld]
bind-address=0.0.0.0
innodb_buffer_pool_size=${BUFFER_POOL_SIZE}
wsrep_cluster_name="${CLUSTERNAME}"
wsrep_cluster_address=gcomm://$PEERS
wsrep_provider=/usr/lib/galera/libgalera_smm.so
max_connections="${MAX_CONNECTIONS}"
performance_schema = off
dog

if [ -n "$MYSQL_ROOT_PASSWORD" ]; then
	log "0 [Warning] Setting root password"
	run 2>/dev/null >/dev/null &
	until mysql -e "GRANT ALL PRIVILEGES on *.* to root@\"%\" \
		IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' \
		WITH \
		GRANT OPTION MAX_QUERIES_PER_HOUR 0 \
		MAX_CONNECTIONS_PER_HOUR 0 \
		MAX_UPDATES_PER_HOUR 0 \
		MAX_USER_CONNECTIONS 0; \
		flush privileges;"; do \
		printf "."
		sleep 2;
	done
	log "0 [Note] done setting root password"
	log "0 [Warning] Killing mysql"
	killall mysqld
	while pgrep mysqld >/dev/null; do
		printf "."
		sleep 2
	done
	log "0 [Note] Mysql killed"
fi

if [ -z "$PEERS" -a -f /var/backups/mysql/mysql.sql ]; then
	log "0 [Note] Backgrounding restore process"
	restore &
fi

backup_wait &

run
